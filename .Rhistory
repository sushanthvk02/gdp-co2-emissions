set.seed(123)
m <- 10000
x <- runif(m, 0, 1)
theta1 <- mean(x * exp(-x))
var_theta1 <- var(x * exp(-x)) / m
theta1
var_theta1
x_gamma <- rgamma(m, shape = 2, rate = 1)
theta2 <- mean(x_gamma <= 1)
var_theta2 <- var(x_gamma <= 1) / m
theta2
var_theta2
h <- function(x) {
x * exp(-x)
}
theta3 <- mean((h(x) + h(1-x)) / 2)
var_theta3 <- var((h(x) + h(1 - x)) / 2) / m
theta3
var_theta3
set.seed(123)
m <- 10000
x <- runif(m, 0, 1)
theta1 <- mean(x * exp(-x))
var_theta1 <- var(x * exp(-x)) / m
theta1
var_theta1
x_gamma <- rgamma(m, shape = 2, rate = 1)
theta2 <- mean(x_gamma <= 1)
var_theta2 <- var(x_gamma <= 1) / m
theta2
var_theta2
h <- function(x) {
x * exp(-x)
}
theta3 <- mean((h(x) + h(1-x)) / 2)
var_theta3 <- var((h(x) + h(1 - x)) / 2) / m
theta3
var_theta3
u <- runif(m)
x_imp <- sqrt(u)
theta4 <- mean(exp(-x) / 2)
var_theta4 <- var(exp(-x) / 2) / m
theta4
var_theta4
u <- runif(m)
x_imp <- sqrt(u)
theta4 <- mean(exp(-x) / 2)
var_theta4 <- var(exp(-x) / 2) / m
theta4
var_theta4
data.frame(
Estimator = c("theta1", "theta2", "theta3", "theta4"),
Estimate = c(theta1, theta2, theta3, theta4),
Variance = c(var_theta1, var_theta2, var_theta3, var_theta4),
Reduction_vs_theta1 = c(0,
(var_theta1 - var_theta2)/var_theta1 * 100,
(var_theta1 - var_theta3)/var_theta1 * 100,
(var_theta1 - var_theta4)/var_theta1 * 100)
)
set.seed(123)
n <- 30
theta <- 1
reps <- 1000
samples <- replicates(reps, max(runif(n, 0, theta)))
set.seed(123)
n <- 30
theta <- 1
reps <- 1000
samples <- replicate(reps, max(runif(n, 0, theta)))
bias <- mean(samples) - theta
variance <- var(samples)
mse <- bias^2 + variance
bias
variance
mse
data.frame(
Estimator = c("theta1", "theta2", "theta3", "theta4"),
Estimate = c(theta1, theta2, theta3, theta4),
Variance = c(var_theta1, var_theta2, var_theta3, var_theta4),
Reduction_vs_theta1_percentage = c(0,
(var_theta1 - var_theta2)/var_theta1 * 100,
(var_theta1 - var_theta3)/var_theta1 * 100,
(var_theta1 - var_theta4)/var_theta1 * 100)
)
set.seed(123)
ns <- 1:100
bias_vals <- sapply(ns, function(n) {
mean(replicate(500, max(runif(n)))) - 1
})
plot(ns, abs(bias_vals), type='l', col='blue', ylab="|Bias|", xlab="n")
lines(ns, 1/ns, col='red', lty=2)
legend("topright", legend=c("|Bias|", "1/n"), col=c("blue", "red"), lty=c(1,2))
set.seed(123)
ns <- 1:100
bias_vals <- sapply(ns, function(n) {
mean(replicate(500, max(runif(n)))) - 1
})
plot(ns, abs(bias_vals), type='l', col='blue', ylab="Bias", xlab="n")
lines(ns, 1/ns, col='red', lty=2)
legend("topright", legend=c("Bias", "1/n"), col=c("blue", "red"), lty=c(1,2))
set.seed(123)
ns <- 1:100
bias_vals <- sapply(ns, function(n) {
mean(replicate(500, max(runif(n)))) - 1
})
plot(ns, abs(bias_vals), col='blue', ylab="Bias", xlab="n")
lines(ns, 1/ns, col='red', lty=2)
legend("topright", legend=c("Bias", "1/n"), col=c("blue", "red"), lty=c(1,2))
set.seed(123)
ns <- 1:100
bias_vals <- sapply(ns, function(n) {
mean(replicate(500, max(runif(n)))) - 1
})
plot(ns, abs(bias_vals), type='l', col='blue', ylab="Bias", xlab="n")
lines(ns, 1/ns, col='red', lty=2)
legend("topright", legend=c("Bias", "1/n"), col=c("blue", "red"), lty=c(1,2))
set.seed(123)
ns <- 1:100
bias_vals <- sapply(ns, function(n) {
mean(replicate(500, max(runif(n)))) - 1
})
plot(ns, abs(bias_vals), type='l', col='blue', ylab="|Bias|", xlab="n")
lines(ns, 1/ns, col='red', lty=2)
legend("topright", legend=c("Bias||", "1/n"), col=c("blue", "red"), lty=c(1,2))
set.seed(123)
ns <- 1:100
bias_vals <- sapply(ns, function(n) {
mean(replicate(500, max(runif(n)))) - 1
})
plot(ns, abs(bias_vals), type='l', col='blue', ylab="|Bias|", xlab="n")
lines(ns, 1/ns, col='red', lty=2)
legend("topright", legend=c("|Bias|", "1/n"), col=c("blue", "red"), lty=c(1,2))
set.seed(123)
ns <- 1:100
bias_vals <- sapply(ns, function(n) {
mean(replicate(500, max(runif(n)))) - 1
}
plot(ns, abs(bias_vals), type='l', col='blue', ylab="|Bias|", xlab="n")
set.seed(123)
ns <- 1:100
bias_vals <- sapply(ns, function(n) {
mean(replicate(500, max(runif(n)))) - 1
})
plot(ns, abs(bias_vals), type='l', col='blue', ylab="|Bias|", xlab="n")
lines(ns, 1/ns, col='red', lty=2)
legend("topright", legend=c("|Bias|", "1/n"), col=c("blue", "red"), lty=c(1,2))
set.seed(123)
bias_vals2 <- sapply(ns, function(n)) {
set.seed(123)
bias_vals2 <- sapply(ns, function(n) {
mean(replicate(500, ((n + 1) /n ) * max(runif(x)))) - 1
})
set.seed(123)
bias_vals2 <- sapply(ns, function(n) {
mean(replicate(500, ((n + 1) /n ) * max(runif(x)))) - 1
})
plot(ns, abs(bias_vals2), type='l', col='green', ylab="|Bias|", xlab="n")
set.seed(123)
bias_vals2 <- sapply(ns, function(n) {
mean(replicate(500, ((n + 1) /n ) * max(runif(x)))) - 1
})
plot(ns, abs(bias_vals2), type='l', col='darkgreen', ylab="|Bias|", xlab="n")
set.seed(123)
bias_vals2 <- sapply(ns, function(n) {
mean(replicate(500, ((n + 1) /n ) * max(runif(x)))) - 1
})
plot(ns, abs(bias_vals2), type='l', col='darkgreen', ylab="|Bias|", xlab="n")
lines(ns, (n + 1) /n, col='red', lty=2)
set.seed(123)
bias_vals2 <- sapply(ns, function(n) {
mean(replicate(500, ((n + 1) /n ) * max(runif(x)))) - 1
})
plot(ns, abs(bias_vals2), type='l', col='darkgreen', ylab="|Bias|", xlab="n")
set.seed(123)
ns <- 1:100
bias_vals2 <- sapply(ns, function(n) {
mean(replicate(500, ((n + 1) /n ) * max(runif(x)))) - 1
})
plot(ns, abs(bias_vals2), type='l', col='darkgreen', ylab="|Bias|", xlab="n")
lines(ns, ((n + 1) / n), col='red', lty=2)
set.seed(123)
ns <- 1:100
bias_vals2 <- sapply(ns, function(n) {
mean(replicate(500, ((n + 1) /n ) * max(runif(x)))) - 1
})
plot(ns, abs(bias_vals2), type='l', col='darkgreen', ylab="|Bias|", xlab="n")
set.seed(123)
n <- 50
thetas <- seq(0.5, 5, length.out = 50)
power <- sapply(thetas, function(theta) {
mean(replicate(1000, max(runif(n, 0, theta)) > theta * (0.95)^(1/n)))
})
plot(thetas, power, type = 'l', col = 'blue',
xlab = "theta", ylab = "Power", main = "Power Curve")
abline(h = 0.05, col='red', lty=2)
set.seed(123)
n <- 50
thetas <- seq(0.5, 5, length.out = 50)
power <- sapply(thetas, function(theta) {
mean(replicate(1000, max(runif(n, 0, theta)) > theta * (0.95)^(1/n)))
})
plot(thetas, power, type = 'l', col = 'blue',
xlab = "theta", ylab = "Power", main = "Power Curve")
abline(h = 0.05, col='red', lty=2)
set.seed(123)
ns <- 1:100
bias_vals2 <- sapply(ns, function(n) {
mean(replicate(500, ((n + 1) /n ) * max(runif(x)))) - 1
})
plot(ns, abs(bias_vals2), type='l', col='darkgreen', ylab="|Bias|", xlab="n")
lines(ns, 1/ns, col='red', lty=2)
legend("topright", legend=c("|Bias|", "1/n"), col=c("blue", "red"), lty=c(1,2))
set.seed(123)
ns <- 1:100
bias_vals2 <- sapply(ns, function(n) {
mean(replicate(500, ((n + 1) /n ) * max(runif(x)))) - 1
})
plot(ns, abs(bias_vals2), type='l', col='blue', ylab="|Bias|", xlab="n")
lines(ns, 1/ns, col='red', lty=2)
legend("topright", legend=c("|Bias|", "1/n"), col=c("blue", "red"), lty=c(1,2))
# Install required package if necessary
if (!require(igraph)) install.packages("igraph", dependencies = TRUE)
library(igraph)
# Define a function to insert nodes into the binary search tree
insert_bst <- function(root, word) {
if (is.null(root)) {
return(list(word = word, left = NULL, right = NULL))
}
if (word < root$word) {
root$left <- insert_bst(root$left, word)
} else {
root$right <- insert_bst(root$right, word)
}
return(root)
}
# List of words to insert into the BST
words <- c("oenology", "phrenology", "campanology", "ornithology",
"ichthyology", "limnology", "alchemy", "astrology")
# Initialize empty tree
bst_root <- NULL
# Insert words into the BST
for (word in words) {
bst_root <- insert_bst(bst_root, word)
}
# Function to convert BST to a data frame for igraph visualization
bst_to_edges <- function(root, edges = NULL) {
if (is.null(root)) {
return(edges)
}
if (!is.null(root$left)) {
edges <- rbind(edges, data.frame(from = root$word, to = root$left$word))
edges <- bst_to_edges(root$left, edges)
}
if (!is.null(root$right)) {
edges <- rbind(edges, data.frame(from = root$word, to = root$right$word))
edges <- bst_to_edges(root$right, edges)
}
return(edges)
}
# Convert BST to edge list
edges <- bst_to_edges(bst_root)
# Create graph object from the edge list
graph <- graph_from_data_frame(edges, directed = TRUE)
# Plot the graph
plot(graph, vertex.size = 30, vertex.label.cex = 0.8,
vertex.label.dist = 1, edge.arrow.size = 0.5)
# Install required package if necessary
if (!require(igraph)) install.packages("igraph", dependencies = TRUE)
library(igraph)
# Define a function to insert nodes into the binary search tree
insert_bst <- function(root, word) {
if (is.null(root)) {
return(list(word = word, left = NULL, right = NULL))
}
if (word < root$word) {
root$left <- insert_bst(root$left, word)
} else {
root$right <- insert_bst(root$right, word)
}
return(root)
}
# List of words to insert into the BST (based on the corrected structure)
words <- c("oenology", "campanology", "alchemy", "astrology",
"ichthyology", "limnology", "phrenology", "ornithology")
# Initialize empty tree
bst_root <- NULL
# Insert words into the BST
for (word in words) {
bst_root <- insert_bst(bst_root, word)
}
# Function to convert BST to a data frame for igraph visualization
bst_to_edges <- function(root, edges = NULL) {
if (is.null(root)) {
return(edges)
}
if (!is.null(root$left)) {
edges <- rbind(edges, data.frame(from = root$word, to = root$left$word))
edges <- bst_to_edges(root$left, edges)
}
if (!is.null(root$right)) {
edges <- rbind(edges, data.frame(from = root$word, to = root$right$word))
edges <- bst_to_edges(root$right, edges)
}
return(edges)
}
# Convert BST to edge list
edges <- bst_to_edges(bst_root)
# Create graph object from the edge list
graph <- graph_from_data_frame(edges, directed = TRUE)
# Plot the graph
plot(graph, vertex.size = 30, vertex.label.cex = 0.8,
vertex.label.dist = 1, edge.arrow.size = 0.5)
library(tidyverse)
df <- read_csv("gdp_co2_data.csv")
par(mfrow = c(2, 2))  # 4-in-1 plot layout
plot(model)
setwd("\\Users\\viswa\\OneDrive\\Documents\\Spring 2025\\DATA 375\\gdp-co2-emissions")
library(tidyverse)
df <- read_csv("gdp_co2_data.csv")
model <- lm(co2_emissions ~ gdp, data = df)
summary(model)
par(mfrow = c(2, 2))  # 4-in-1 plot layout
plot(model)
plot(resid(model), fitted(model))
hist(residuals(model),
main = "Histogram of Residuals",
xlab = "Residuals",
col = "lightblue",
border = "white")
shapiro.test(residuals(model))
